#include <iostream>
#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <ctype.h>
#include <unistd.h>

#include<wiringPi.h>
#include<wiringSerial.h>

#define WIDE    160.0
#define HEIGHT  120.0
#define     min_threa   500
#define DELAY_TIME 30
//中断引脚
#define REST   23
//亮灯引脚
#define Led_pin     28
#define shout_down   22//关机引脚

using namespace std;
using namespace cv;

Mat g_srcImage;
Mat g_cannyImage;
int g_nThresh = 80;
int g_nThresh_max = 255;
RNG g_rng(12345);
vector <vector <Point> > contours;
vector <Vec4i> g_vHierarchy;


int  set_gpio(void);
void REST_CallBack(void);
void Shout_down_Callback(void);

int fd;  //串口名

void UART_init()
{
    if(-1==wiringPiSetup())
    {
        cerr<<"set up error"<<endl;
        exit(-1);
    }
    if((fd = serialOpen("/dev/ttyAMA0",9600))==-1)    //初始化串口，波特率9600
    {
        cerr<<"serial open error"<<endl;
        exit(-1);
        printf("serial open error\n");
    }
    serialPrintf(fd,"Hello World!!!\n");

//    pinMode(LEDPin,OUTPUT);
//    digitalWrite(LEDPin,HIGH);

}

char UART_receive()  // 返回值类型？
{
    int data;
    if(serialDataAvail(fd) >= 1)    //如果串口缓存中有数据
    {
       data = serialGetchar(fd);
       printf("%c  \n",data);
       serialPutchar (fd,data);
    }
    return data;
}
void UART_print_message(int a,int b)
{
    serialPrintf(fd,"a%3d,%3dz\n",a,b);
}

void FPS_display()
{
    double fps  = 0;
    static char string[10];  // 用于存放帧率的字符串
    static double t = 0;
    static char a = 0;
    a++;
    t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
    printf("t:%f\n", t);
    fps = 1.0 / t;
    t = (double)cv::getTickCount();

    if(a%10==0)
        sprintf(string, "%.2f", fps);      // 帧率保留两位小数
    // 将帧率信息写在输出帧上
    std::string fpsString("FPS:");
    fpsString += string;                    // 在"FPS:"后加入帧率数值字符串
    cv::putText(g_srcImage, // 图像矩阵
                fpsString,                  // string型文字内容
                cv::Point(5, 20),           // 文字坐标，以左下角为原点
                cv::FONT_HERSHEY_SIMPLEX,   // 字体类型
                1, // 字体大小
                cv::Scalar(0,0,255));       // 字体颜色
}

int main()
{
        UART_init();
//        double t,fps=0;
        VideoCapture capture(0);
        fflush(stdout);
        u_int8_t old_x=80,old_y=60;
        int minDis=0;
        int dis=0;
        char flag_new=1;
        cv::Rect targetRect;
        cv::Rect Rect_1;
        u_int8_t label=0;
        int candi[3][4]={0};  //3个候选方块，x,y,size,label
        Point center(80,60);
//        vector<cv::Point> targetContour;
//        u_int8_t buf[8]={0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xfe};  //123_123.
        while(1)
        {
            /**********************5.串口打印*************************/
//            printf("fps: %.2f\n",fps);
            printf("\n%d %d\n",center.x,center.y);
            printf("%d %d  %d\n",old_x,old_y,minDis);

            fflush(stdout);
//            UART_receive();
            UART_print_message(center.x,center.y);
            /**********************1.变量归位*************************/
            label=0;
            minDis=1000;
            memset(candi,0,sizeof(u_int8_t)*12);
            capture>>g_srcImage;
            resize(g_srcImage,g_srcImage,Size(160,120));
            flip(g_srcImage,g_srcImage,-1);//1代表水平方向旋转180度
            cvtColor( g_srcImage, g_cannyImage, COLOR_BGR2GRAY );


            /**********************2.图像处理*************************/

            // 1.二值化  @@@@@@@@@

            cv::threshold(g_cannyImage,g_cannyImage,100,255,2);
//            THRESH_BINARY 二进制阈值化 -> 大于阈值为1 小于阈值为0
//            THRESH_BINARY_INV 反二进制阈值化 -> 大于阈值为0 小于阈值为1
//            THRESH_TRUNC 截断阈值化 -> 大于阈值为阈值，小于阈值不变
//            THRESH_TOZERO 阈值化为0 -> 大于阈值的不变，小于阈值的全为0
//            THRESH_TOZERO_INV 反阈值化为0 -> 大于阈值为0，小于阈值不变
            imshow("ooo",g_cannyImage);

            // 2.滤波（均值）

            blur( g_cannyImage, g_cannyImage, Size(3,3) );

            // 3.边缘

            Canny( g_cannyImage, g_cannyImage, g_nThresh, g_nThresh*2, 3 ); //@@@@@@@@@@
//            通常第3、4比值为 1：2～3;
//            低于3，不是边缘；高于4是边缘；中间，若与4相邻则为边缘。

            // 4.膨胀
            imshow("Canny",g_cannyImage);



            /**********************3.目标查找*************************/



            // 1.查找轮廓，对应连通域

            cv::findContours(g_cannyImage,contours,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE);


            // 2.阈值内找最大三个色块。

            u_int8_t blob_num = contours.size();
            if(blob_num<1)
            {
                printf("NO_1\n");
                center.x=80;
                center.y=60;
                cv::imshow("b", g_srcImage);
                waitKey(DELAY_TIME);
                continue;
            }

            for(size_t i = 0; i < blob_num; i++)
            {
              double area = (contourArea(contours[i]));
                if (area > candi[0][2] )
                {
                    candi[0][2] = area;
                    candi[0][3] = i;
                }
                else if (area > candi[1][2] )
                {
                    candi[1][2] = area;
                    candi[1][3] = i;
                }
                else if (area > candi[2][2] )
                {
                    candi[2][2] = area;
                    candi[2][3] = i;
                }
            }
            if(candi[0][2]<=0)  // area=0, no blob
            {
                printf("NO_2\n");
                center.x=80;
                center.y=60;
                cv::imshow("b", g_srcImage);
                waitKey(DELAY_TIME);
                continue;
            }

            //0.初始目标

            if(flag_new==1)
            {
                targetRect = cv::boundingRect(contours[candi[0][3]]);
                flag_new=0;
                center.x=targetRect.x+targetRect.width/2;
                center.y=targetRect.y+targetRect.height/2;
                old_x=center.x;
                old_y=center.y;
//                printf(old_x,old_y)
            }

            // 3.比对中心坐标


            if(blob_num>3)
                blob_num=3;
            for(u_int8_t i=0;i<blob_num;i++)
            {
                Rect_1 = cv::boundingRect(contours[candi[i][3]]);
                cv::rectangle(g_srcImage, Rect_1, cv::Scalar(255,0,0));
                candi[i][0]=Rect_1.x+Rect_1.width/2;
                candi[i][1]=Rect_1.y+Rect_1.height/2;
                dis=((candi[i][0]-old_x)*(candi[i][0]-old_x) + (candi[i][1]-old_y)*(candi[i][1]-old_y))/100;
                if(abs(dis)<minDis)
                {
                    minDis=dis;
                    label=i;
                    targetRect=Rect_1;
                }
            }
            // 4.容错
            if(minDis>30) //1/4屏幕
            {
                static char count=0;
                count++;
                printf("count: %d minDis: %d  \nlabel: %3d %3d\noldxy: %3d %3d\n",count,minDis,candi[label][0],candi[label][1],old_x,old_y);
                if(count>=50)  // refind target blob
                {
                    count=0;
                    printf("new!\n");
                    flag_new = 1;
                }
                center.x=80;
                center.y=60;
//                old_x=80;old_y=60;
                cv::imshow("b", g_srcImage);
                waitKey(DELAY_TIME);
                continue;
            }

            cv::rectangle(g_srcImage, targetRect, cv::Scalar(255,255,255));
            center.x=candi[label][0];
            center.y=candi[label][1];
            old_x=center.x;
            old_y=center.y;
            cv::imshow("b", g_srcImage);
            waitKey(DELAY_TIME);

//            /**********************4.计算帧率*************************/
//            t = ((double)cv::getTickCount() - t) / cv::getTickFrequency();
//            fps = 1.0 / t;
//            t = (double)cv::getTickCount();


      }
}
